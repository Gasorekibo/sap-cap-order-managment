"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
async function default_1(srv) {
    console.log("========================================");
    console.log("ORDER MANAGEMENT SERVICE IS INITIALIZING");
    console.log("========================================");
    const { Orders, OrderItems, Products, Customers } = srv.entities;
    srv.before("CREATE", Products, async (req) => {
        if (!req.data.name || !req.data.price || !req.data.stockQuantity) {
            req.error(400, "Name, price, and stock quantity are required");
            return;
        }
        if (req.data.price < 0) {
            req.error(400, "Price cannot be negative");
            return;
        }
        if (req.data.stockQuantity < 0) {
            req.error(400, "Stock quantity cannot be negative");
            return;
        }
        const existingProduct = await srv.tx(req).run(SELECT.one.from(Products).where({ name: req.data.name }));
        if (existingProduct) {
            req.error(400, `Product with name ${req.data.name} already exists`);
            return;
        }
    });
    srv.before("CREATE", Customers, async (req) => {
        if (!req.data.firstName || !req.data.email || !req.data.lastName) {
            req.error(400, "Name and email are required");
            return;
        }
        const existingCustomer = await srv.tx(req).run(SELECT.one.from(Customers).where({ email: req.data.email }));
        if (existingCustomer) {
            req.error(400, `Customer with email ${req.data.email} already exists`);
            return;
        }
    });
    srv.before("CREATE", Orders, async (req) => {
        if (!req.data.customer_ID) {
            req.error(400, "Customer ID is required");
            return;
        }
        const customer = await srv.tx(req).run(SELECT.one.from(Customers).where({ ID: req.data.customer_ID }));
        if (!customer) {
            req.error(404, `Customer with ID ${req.data.customer_ID} not found`);
            return;
        }
        if (!req.data.items || !Array.isArray(req.data.items) || req.data.items.length === 0) {
            req.error(400, "Order must contain at least one item");
            return;
        }
        let totalOrderAmount = 0;
        const processedItems = [];
        try {
            const productPromises = req.data.items.map(async (orderItem) => {
                if (!orderItem.product_ID || !orderItem.quantity) {
                    throw new Error("Product ID and quantity are required for all order items");
                }
                const product = await srv.tx(req).run(SELECT.one.from(Products).where({ ID: orderItem.product_ID }));
                if (!product) {
                    throw new Error(`Product with ID ${orderItem.product_ID} not found`);
                }
                if (product.stockQuantity < orderItem.quantity) {
                    throw new Error(`Not enough stock available for product ${product.name}. Requested: ${orderItem.quantity}, Available: ${product.stockQuantity}`);
                }
                const itemTotalPrice = product.price * orderItem.quantity;
                totalOrderAmount += itemTotalPrice;
                return {
                    original: orderItem,
                    product: product,
                    unitPrice: product.price,
                    totalPrice: itemTotalPrice
                };
            });
            const validatedItems = await Promise.all(productPromises);
            for (const item of validatedItems) {
                // Update product stock
                await srv.tx(req).run(UPDATE(Products)
                    .where({ ID: item.original.product_ID })
                    .set({
                    stockQuantity: { "-=": item.original.quantity }
                }));
                item.original.unitPrice = item.unitPrice;
                item.original.totalPrice = item.totalPrice;
            }
            req.data.totalAmount = totalOrderAmount;
        }
        catch (error) {
            req.error(400, error.message);
            return;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,